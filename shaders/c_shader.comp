#version 430 compatibility
 
uniform vec3 projOrigin;
uniform vec3 sphereCenter;
uniform float sphereRadius;

layout (std430, binding = 4) buffer Pos
{
	vec4 Positions [ ];
};

layout (std430, binding = 5) buffer Col 
{
	vec4 Colors [ ];
};

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;


void main()
{
	uint g_id = gl_GlobalInvocationID.x;
	
	// Get position and color from map
	vec3 pos = Positions[g_id].xyz;
	vec3 color = Colors[g_id].xyz;
	
	// Calculate number of intersections between projected line and sphere
	vec3 dir = normalize(pos - projOrigin);
	float numIntersections = pow(dot(dir, projOrigin - sphereCenter), 2) - (pow(length(projOrigin - sphereCenter), 2) - pow(sphereRadius, 2));
	
	// Change particle color depending on number of intersections
	if(numIntersections >= 0)
		color = vec3(0.0, 0.8, 0.9);
	else
		color = vec3(0.0, 0.0, 0.5);
	
	Positions[g_id].xyz = pos;
	Colors[g_id].xyz = color; 
}

